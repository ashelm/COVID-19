import os
import pandas as pd
from datetime import datetime, timedelta
import requests
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline

# Function to fetch data from the GitHub repository for France
def fetch_data(date):
    url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{date.strftime("%m-%d-%Y")}.csv'
    response = requests.get(url)
    if response.status_code == 200:
        return pd.read_csv(url)
    else:
        return None

# Function to filter data for France
def filter_France(df):
    return df[df['Country_Region'] == 'France']

# Start and end dates for December and July in each year
start_date_december = [datetime(year, 12, 1) for year in range(2021, 2023)]
end_date_december = [datetime(year, 12, 31) for year in range(2021, 2023)]

start_date_july = [datetime(year, 7, 1) for year in range(2021, 2023)]
end_date_july = [datetime(year, 7, 31) for year in range(2021, 2023)]

# Directory to save CSV files
output_dir = 'cleaned_covid_data_france'
os.makedirs(output_dir, exist_ok=True)

# Loop through each date in December and July for each year
for start_dec, end_dec, start_jul, end_jul in zip(start_date_december, end_date_december, start_date_july, end_date_july):
    for current_date in [start_dec + timedelta(days=x) for x in range((end_dec-start_dec).days + 1)]:
        print(f"Processing data for {current_date.strftime('%Y-%m-%d')}...")
        
        # Fetch data for France
        data = fetch_data(current_date)
        
        if data is not None:
            france_data = filter_France(data)
            if not france_data.empty:
     
                # Save filtered data to CSV
                output_file = os.path.join(output_dir, f'{current_date.strftime("%Y-%m-%d")}.csv')
                france_data.to_csv(output_file, index=False)
                print(f"Saved data to {output_file}")
            else:
                print("No data available for France for this date.")
        else:
            print("Data not available for this date.")

print("All data processed successfully.")

# Directory containing France CSV files
data_dir = 'cleaned_covid_data_france'


# Function to load all the CSV files and concatenate them into a single DataFrame
def load_data(directory):
    dfs = []
    for file in os.listdir(directory):
        if file.endswith('.csv'):
            df = pd.read_csv(os.path.join(directory, file))
            dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

# Load data
covid_data = load_data(data_dir)

# Define possible datetime formats
possible_formats = ['%m/%d/%Y %H:%M', '%m/%d/%y %H:%M']

# Convert 'Last Update' column to datetime, trying different formats
for fmt in possible_formats:
    try:
        covid_data['Last_Update'] = pd.to_datetime(covid_data['Last_Update'], format=fmt, errors='coerce')
        break  # Break the loop if parsing is successful
    except ValueError:
        pass  # If parsing fails, try the next format

# Remove rows without a valid timestamp
covid_data = covid_data.dropna(subset=['Last_Update'])

# Convert 'Last Update' column to date
covid_data['Last_Update'] = covid_data['Last_Update'].dt.date

# Grouping the data by date and sum the Confirmed, Deaths, and Recovered cases
grouped_data = covid_data.groupby('Last_Update').sum()

# Plotting the number of confirmed cases in France
plt.plot(grouped_data.index, grouped_data['Confirmed'], label='Confirmed', marker='o', color='blue')
plt.title('COVID-19 Timeline for France')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.legend(['Confirmed'], loc=0)
plt.tight_layout()
plt.show()

# Plotting the number of deaths in France
plt.plot(grouped_data.index, grouped_data['Deaths'], label='Deaths', marker='x', color='red')
plt.title('COVID-19 Timeline for France')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.legend(['Death'], loc=0)
plt.tight_layout()
plt.show()

# Plotting the number of recovered cases in France
plt.plot(grouped_data.index, grouped_data['Recovered'], label='Recovered', marker='s', color='green')
plt.title('COVID-19 Timeline for France')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.legend(['Recovered'], loc=0)
plt.tight_layout()
plt.show()
